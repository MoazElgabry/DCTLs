//Flimic Contrast
__DEVICE__ float apply_linear_contrast(float in, float contrast, float pivot) {
	
	float out;
    //offsetting the user slider to set stratingpoints at zero
    contrast = contrast+1.f;
    //limit user input to zero
    if (contrast <0.f) {contrast = _fmaxf(contrast, 0.0f);}
	out = (in - pivot) * contrast + pivot;

	return out;}

__DEVICE__ float apply_rolling_contrast(float in, float contrast, float pivot) {
    
    float out;
    float zerocheck = 1.f;
    //offsetting the user slider to set stratingpoints at zero
    contrast = contrast+1.f;


    if (in <= pivot) {
    out = _powf(_fabs((in / pivot)), contrast) * pivot;
    }
    
    else {
    in = 1 - in;
    pivot = 1 - pivot;
    

    if (in < 0.f) { 
    zerocheck = -1.f;
    }

    //out = _copysignf((_powf(_fabs((in / pivot)) , contrast) * pivot),(in / pivot));
    out = (_powf(_fabs((in / pivot)) , contrast) * pivot)*zerocheck;
    out = 1 - out;
    }
    
    return out;}

__DEVICE__ float3 apply_highlight_split(float3 in, float strength, float color_mix) {
  float3 out = in;
  float red_strength = ((1 - color_mix) * strength) + 1.f;
  float green_strength = (color_mix * strength) + 1.f;

  out.x = in.x * red_strength;
  out.y = in.y * green_strength;
  out.z = in.z;
  out /= (_fmaxf(red_strength, green_strength));

  return out;
  }

__DEVICE__ float3 apply_shadow_split(float3 in, float strength, float color_mix) {

  float3 out = in;

  in.x = (1 - in.x);
  in.y = (1 - in.y);
  in.z = (1 - in.z);
  
  float green_strength = (color_mix * strength) + 1.f;
  float blue_strength = ((1 - color_mix) * strength) + 1.f;
  
  out.x = in.x;
  out.y = in.y / green_strength;
  out.z = in.z / blue_strength;
  out *= (_fminf(green_strength, blue_strength));
  
  out.x = (1 - out.x);
  out.y = (1 - out.y);
  out.z = (1 - out.z);
  
  

  return out;
  }


DEFINE_UI_PARAMS(contrast, Contrast ğŸŒ“, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 2.0, 0.1)
DEFINE_UI_PARAMS(pivot, Contrast Pivot ğŸ“Œ, DCTLUI_SLIDER_FLOAT, 0.435, 0.0, 1.0, 0.1)
DEFINE_UI_PARAMS(split_strength, Split Tone StrengthğŸ’ª, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.1)
DEFINE_UI_PARAMS(split_shadow_color_mix, ğŸ”µ/ğŸŸ¢ Shadows, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.1)
DEFINE_UI_PARAMS(split_highlight_color_mix, ğŸ”´/ğŸŸ¢ Highlights, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.1)
DEFINE_UI_PARAMS(contrast_type, Contrast Type, DCTLUI_COMBO_BOX, 0, { linear, S_curve }, { Linear, S-Curve })
DEFINE_UI_PARAMS(bypass, ğŸš« Bypass, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(limiter, ğŸ”§ Limit input to 0-1, DCTLUI_CHECK_BOX, 0)




__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    
    float3 in = {p_R, p_G, p_B};
    //scales down the strength slider to limit the effective range to a range that produces pleasing results
    split_strength = split_strength * .2f;
    split_shadow_color_mix = (split_shadow_color_mix * .3f) + .18f;
    split_highlight_color_mix = (split_highlight_color_mix * .3f) + .25f;

    //clamp check box functionality
    if(limiter == 1) {
    in.x = _clampf(in.x, 0.f, 1.5f);
    in.y = _clampf(in.y, 0.f, 1.5f);
    in.z = _clampf(in.z, 0.f, 1.5f);    
    }

    float3 out;

    if (bypass ==1) {
        float3 out = {p_R, p_G, p_B};

    return out;
    }

    if (contrast_type == linear) {

    out.x = apply_linear_contrast(in.x, contrast, pivot);
    out.y = apply_linear_contrast(in.y, contrast, pivot);
    out.z = apply_linear_contrast(in.z, contrast, pivot);
    }

    if (contrast_type == S_curve) {
    out.x = apply_rolling_contrast(in.x, contrast, pivot);
    out.y = apply_rolling_contrast(in.y, contrast, pivot);
    out.z = apply_rolling_contrast(in.z, contrast, pivot);
    
    }

    out = apply_shadow_split(out, split_strength, split_shadow_color_mix);
    out = apply_highlight_split(out, split_strength, split_highlight_color_mix);

    return out;
}