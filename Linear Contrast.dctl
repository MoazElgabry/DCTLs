DEFINE_UI_PARAMS(contrast, Contrast, DCTLUI_SLIDER_FLOAT, 1.0f, 0.0f, 2.0f, 0.1f)
DEFINE_UI_PARAMS(pivot, Pivot, DCTLUI_SLIDER_FLOAT, 0.435f, 0.0f, 1.0f, 0.1f)
DEFINE_UI_PARAMS(p_mix_contrast, Mix, DCTLUI_SLIDER_FLOAT, 1.0f, 0.0f, 1.0f, 0.1f)



__DEVICE__ float3 apply_linear_contrast(float3 in, float contrast, float pivot) {
    
    float3 out = in;

    
    out.x = (in.x - pivot) * contrast + pivot;
    out.y = (in.y - pivot) * contrast + pivot;
    out.z = (in.z - pivot) * contrast + pivot;
    

    return out;
    }


__DEVICE__ float3 apply_rolling_contrast(float3 in, float contrast, float pivot) {
    
    float3 out = in;
    float negcheck = 1.0f;

    // apply rolling contrast
    if (in.x < 0.f && in.y < 0.0f && in.z < 0.0f) {
      out.x = 1 - out.x;
    out.y = 1 - out.y;
    out.z = 1 - out.z;
      }

    if (in.x <= pivot && in.y <= pivot && in.z <= pivot) {
    out.x= _powf(_fabs((in.x / pivot)), contrast) * pivot;
    out.y= _powf(_fabs((in.y / pivot)), contrast) * pivot;
    out.z= _powf(_fabs((in.z / pivot)), contrast) * pivot;
    }
    
    else {
    
    in.x = 1 - in.x;
    in.y = 1 - in.y;
    in.z = 1 - in.z;
    pivot = 1 - pivot;
      if (in.x < 0.f && in.y < 0.0f && in.z < 0.0f) { negcheck = -1.f;}
    //out.x = isnan(_copysignf((_powf(_fabs((in.x / pivot)) , contrast) * pivot),negcheck));
    //out.y = isnan(_copysignf((_powf(_fabs((in.y / pivot)) , contrast) * pivot),negcheck));
    //out.z = isnan(_copysignf((_powf(_fabs((in.z / pivot)) , contrast) * pivot),negcheck));

    //out.x = _copysignf((_powf(_fabs((in.x / pivot)) , contrast) * pivot),negcheck);
    //out.y = _copysignf((_powf(_fabs((in.y / pivot)) , contrast) * pivot),negcheck);
    //out.z = _copysignf((_powf(_fabs((in.z / pivot)) , contrast) * pivot),negcheck);

    out.x = (_powf(_fabs((in.x / pivot)) , contrast) * pivot)*negcheck;
    out.y = (_powf(_fabs((in.y / pivot)) , contrast) * pivot)*negcheck;
    out.z = (_powf(_fabs((in.z / pivot)) , contrast) * pivot)*negcheck;
    


    out.x = 1 - out.x;
    out.y = 1 - out.y;
    out.z = 1 - out.z;

    
    }
    
    return out;}




__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    
   float3 in_RGB = make_float3(p_R, p_G, p_B);
   float3 out = in_RGB;

   //float out = in*contrast;



   float3 lin_contrast = apply_linear_contrast (in_RGB, contrast, pivot);
   float3 roll_contrast = apply_rolling_contrast (in_RGB, contrast, pivot);
   float3 mix_con = _mix(lin_contrast, roll_contrast, p_mix_contrast);
   out = mix_con;
   //float lin_contrast.y = apply_linear_contrast (in.y, contrast, pivot);
   //float lin_contrast.z = apply_linear_contrast (in.z, contrast, pivot);
   //out = lin_contrast;


    return out;
}